* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.container {
    margin: 40px;
    border: 2px solid red;
    display: grid;
    /* grid-template-columns: 100px 100px 100px 100px; */
    /* 4 boxes in each row - each of 100px then leaving the space unoccupied */
    /* The grid-template-columns property defines the number of columns in your grid layout, and it can define the width of each column.
    The value is a space-separated list, where each value defines the width of the respective column. */

    /* grid-template-columns: auto auto auto; */
    /* 3 boxes equally taking space in each row and leaving no space */

    /* grid-template-columns: repeat(4, 200px); */
    /* repeating 4 boxes of 200px in each row then leaving the space unoccupied */
    /* It is not advisable to give an absolute value to the column boxes as it would result in overflowing of the boxes out of the grid when compressing the site.  */

    /* grid-template-columns: 1fr 5fr 1fr; */
    /* 7 parts divided as fractions -> would prevent overflowing as it's always distributable.  */

    /* grid-template-rows: 200px 200px; */
    /* The grid-template-rows property defines the height of each row. */
    /* first row gets 200px, 2nd row gets 200px and the remaining rows are set according to the content height */

    grid-auto-rows: 100px;
    /* the remaining rows get 100px automatically */

    /* grid-template-columns: repeat(4, 100px);
    justify-content: space-evenly; */
    /* The justify-content property is used to align the whole grid inside the container. */

    grid-template-columns: repeat(4, 1fr);
    justify-content: space-between;
    gap: 20px;
}

.box {
    border: 2px solid rgb(8, 0, 255);
    background-color: rgb(178, 176, 255);
    padding: 20px;
}

#box-1 {
    /* grid-column-start: 1;
    grid-column-end: -1; */
    /* TO VISUALIZE BETTER: Go to inspect -> layout -> grid overlays */

    /* SHORTHAND PROPERTY FOR ABOVE: */
    grid-column: 1 / -1;
}

#box-2 {
    grid-column-start: 1;
    grid-column-end: span 2;
    grid-row-start: 2;
    grid-row-end: span 2;
    /* starts at col 1 and occupies space of 2 cols, similarly starts from row 2 and occupies space of 2 rows. */
}

#box-3 {
    grid-row: span 3;
    /* (starts where it currently is i.e., row 2 and spans 3 rows. So it's the same as 2 / span 3) */
}

/* The grid-area property can be used as a shorthand property for the
grid-row-start / grid-column-start / grid-row-end / grid-column-end */

#box-6 {
    grid-area: 4 / 1 / 7 / 3;
}

#box-11 {
    width: 40px;
    height: 20px;
    justify-self: end;
    align-self: flex-end;
}
/* justify-self: Aligns a grid item inside a cell along the inline (row) axis
align-self: Aligns a grid item inside a cell along the block (column) axis (as opposed to justify-self which aligns along the inline (row) axis).
            This value applies to the content inside a single grid item. */

.parent {
    width: 400px;
    height: 400px;
    border: 2px solid red;
    display: grid;
    /* justify-content: center;
    align-content: center; */
    /* To align the child in the center */
}

.child {
    width: 100px;
    height: 100px;
    border: 2px solid red;
    justify-self: center;
    align-self: center;
    /* To align the child in the center */
}