* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

.container {
    width: 100%;
    height: 100vh;
    background-color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
}

.button {
    background-color: #d2d2d2;
    width: 200px;
    height: 100px;
    border-radius: 200px;
    cursor: pointer;
    position: relative;
    transition: 0.2s;
}

.button::before {
    content: '';
    position: absolute;
    background-color: rgba(0, 67, 67, 0.825);
    width: 90px;
    height: 90px;
    border-radius: 200px;
    margin: 5px;
    transition: 0.2s;
}

input:checked + .button {
    background-color: rgb(162, 207, 226);
}
/* In short, if input is checked,change the bg color of .button class. */

input:checked + .button::before {
    transform: translateX(100px);
}
/* In short, if input is checked, translate the .button::before to 100px right */

input {
    display: none;
}





/* 3. Button Styles:
   - `.button`: This class styles the label element, which is used to create the appearance of the toggle button.
     - `background-color: #d2d2d2;`: Sets the background color of the button.
     - `width: 200px; height: 100px;`: Defines the width and height of the button.
     - `border-radius: 200px;`: Rounds the corners of the button to make it circular.
     - `cursor: pointer;`: Changes the cursor to a pointer when hovering over the button.
     - `position: relative;`: Positions the button relatively within its container.
     - `transition: 0.2s;`: Specifies a 0.2-second transition effect for smooth animations.

4. Button Pseudo-element Styles (`::before`):
   - `.button::before`: This pseudo-element is added to the label element and used to create a sliding effect.
     - `content: '';`: Adds an empty content to the pseudo-element.
     - `position: absolute;`: Positions the pseudo-element absolutely within the button.
     - `background-color: rgba(0, 67, 67, 0.825);`: Sets the background color of the pseudo-element.
     - `width: 90px; height: 90px;`: Defines the width and height of the pseudo-element.
     - `border-radius: 200px;`: Rounds the corners of the pseudo-element.
     - `margin: 5px;`: Adds a margin around the pseudo-element.
     - `transition: 0.2s;`: Specifies a 0.2-second transition effect for smooth animations.

5. Input Styles:
   - `input:checked + .button`: This CSS selector targets the `.button` element that immediately follows a checked (`:checked`) `input` element. In other words, 
        it applies styles to the `.button` element when the associated `input` element is checked.

   - `background-color: rgb(162, 207, 226);`: When the `input` element is checked (for example, when you click the toggle button), this line changes the background 
        color of the `.button` element to `rgb(162, 207, 226)`, which is a light blue color.

   - `input:checked + .button::before`: This selector targets the `::before` pseudo-element of the `.button` element that immediately follows a checked `input` element.

   - `transform: translateX(100px);`: When the `input` element is checked, this line applies a transformation to the `::before` pseudo-element. Specifically, it moves
        the pseudo-element horizontally (`translateX`) by 100 pixels to the right. This transformation creates a sliding effect, making the pseudo-element appear to slide 
        to the right when the toggle button is checked.
   - `input:checked + .button`: This selector targets the label element with the class "button" that is immediately preceded by a checked input checkbox.
     - `background-color: rgb(162, 207, 226);`: Changes the background color of the button when the checkbox is checked.

7. Checked Pseudo-element Styles:
    - `input:checked + .button::before`: This selector targets the pseudo-element of the label element when the input checkbox is checked.
    - `transform: translateX(100px);`: Transforms the pseudo-element horizontally by moving it 100 pixels to the right. This creates a sliding effect when the
        checkbox is checked. */